package health;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import static java.awt.Font.BOLD;
import static java.awt.Font.ITALIC;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
public class RequestConversation extends JFrame {
  int requestNumber;
  String userID;
  String userType;
  String element;
  Connection connection = null;
  ResultSet resultSet = null;
  PreparedStatement preparedStatement = null;

  public RequestConversation(int new_requestID, String new_userID, String new_userType) {
    initComponents();
    String sql;
    requestNumber = new_requestID;
    userID = new_userID;
    userType = new_userType;
    try {
      Class.forName("org.sqlite.JDBC");
      connection = DriverManager.getConnection("jdbc:sqlite:Health_Connect_DB");
      JOptionPane.showMessageDialog(null, "Connected");
      Statement statement = connection.createStatement();
    } catch (ClassNotFoundException | SQLException e) {
      JOptionPane.showMessageDialog(null, e);
    }
    sql = "SELECT * FROM Message WHERE RID = ?";
    try {
      preparedStatement = connection.prepareStatement(sql);
      String temp = Integer.toString(requestNumber);
      preparedStatement.setString(1, temp);
      resultSet = preparedStatement.executeQuery();
      currentRequest.setLineWrap(true);
      currentRequest.setWrapStyleWord(true);
      addToRequest.setLineWrap(true);
      addToRequest.setWrapStyleWord(true);
      if (resultSet.next()) {
        element = resultSet.getString("TimeStamp");
        currentRequest.append(element + "\n");
        element = resultSet.getString("Message");
        currentRequest.append(element + "\n");
        while (resultSet.next()) {
          element = resultSet.getString("TimeStamp");
          currentRequest.append(element + "\n");
          element = resultSet.getString("Message");
          currentRequest.append(element + "\n");
        }
      } else {
        JOptionPane.showMessageDialog(null, "No message added");
      }
      if ("Doctor".equals(userType)) {
        sql = "UPDATE Message SET DUsername = ? WHERE RID = ?";
        preparedStatement = connection.prepareStatement(sql);
        preparedStatement.setString(1, userID);
        preparedStatement.setString(2, temp);
        preparedStatement.execute();
      }

    } catch (HeadlessException | SQLException e) {
      JOptionPane.showMessageDialog(null, e);
    } finally {
      try {
        resultSet.close();
        preparedStatement.close();
      } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, e);
      }
    }

    sql = "SELECT Status FROM Request WHERE RID = ?";
    try {
      preparedStatement = connection.prepareStatement(sql);
      String temp = Integer.toString(requestNumber);
      preparedStatement.setString(1, temp);
      resultSet = preparedStatement.executeQuery();
      if ("Closed".equals(resultSet.getString("Status"))) {
        closeButton.setEnabled(false);
        addButton.setEnabled(false);
      }
    } catch (SQLException e) {
      JOptionPane.showMessageDialog(null, e);
    } finally {
      try {
        resultSet.close();
        preparedStatement.close();
      } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, e);
      }
    }
  }

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT
   * modify this code. The content of this method is always regenerated by the Form Editor.
   */
  private void initComponents() {

    JScrollPane jScrollPane1 = new JScrollPane();
    currentRequest = new JTextArea();
    JScrollPane jScrollPane2 = new JScrollPane();
    addToRequest = new JTextArea();
    addButton = new JButton();
    closeButton = new JButton();
    JButton backButton = new JButton();
    JLabel jLabel7 = new JLabel();
    JLabel jLabel1 = new JLabel();

    setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

    currentRequest.setColumns(20);
    currentRequest.setRows(5);
    jScrollPane1.setViewportView(currentRequest);

    addToRequest.setColumns(20);
    addToRequest.setRows(5);
    jScrollPane2.setViewportView(addToRequest);

    addButton.setText("Add to Request");
    addButton.addActionListener(this::addButtonActionPerformed);

    closeButton.setText("Close Request");
    closeButton.addActionListener(this::closeButtonActionPerformed);

    backButton.setText("Back");
    backButton.addActionListener(this::backButtonActionPerformed);

    jLabel7.setFont(new Font("Papyrus", BOLD, 14));
    jLabel7.setForeground(new Color(51, 51, 255));
    jLabel7.setText("HealthConnect");

    jLabel1.setFont(new Font("Eras Demi ITC", ITALIC, 24));
    jLabel1.setText("View Request");

    GroupLayout layout = new GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout
            .createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(
                layout
                    .createSequentialGroup()
                    .addContainerGap()
                    .addGroup(
                        layout
                            .createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(
                                layout
                                    .createSequentialGroup()
                                    .addComponent(
                                        jLabel1,
                                        GroupLayout.PREFERRED_SIZE,
                                        462,
                                        GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(
                                        LayoutStyle.ComponentPlacement.RELATED,
                                        GroupLayout.DEFAULT_SIZE,
                                        Short.MAX_VALUE)
                                    .addComponent(
                                        jLabel7,
                                        GroupLayout.PREFERRED_SIZE,
                                        124,
                                        GroupLayout.PREFERRED_SIZE))
                            .addGroup(
                                layout
                                    .createSequentialGroup()
                                    .addComponent(
                                        jScrollPane1,
                                        GroupLayout.PREFERRED_SIZE,
                                        367,
                                        GroupLayout.PREFERRED_SIZE)
                                    .addGap(66, 66, 66)
                                    .addGroup(
                                        layout
                                            .createParallelGroup(GroupLayout.Alignment.LEADING)
                                            .addGroup(
                                                layout
                                                    .createSequentialGroup()
                                                    .addComponent(
                                                        addButton,
                                                        GroupLayout.PREFERRED_SIZE,
                                                        124,
                                                        GroupLayout.PREFERRED_SIZE)
                                                    .addGap(31, 31, 31)
                                                    .addComponent(
                                                        closeButton,
                                                        GroupLayout.PREFERRED_SIZE,
                                                        116,
                                                        GroupLayout.PREFERRED_SIZE)
                                                    .addGap(30, 30, 30)
                                                    .addComponent(
                                                        backButton,
                                                        GroupLayout.PREFERRED_SIZE,
                                                        83,
                                                        GroupLayout.PREFERRED_SIZE))
                                            .addComponent(
                                                jScrollPane2,
                                                GroupLayout.PREFERRED_SIZE,
                                                393,
                                                GroupLayout.PREFERRED_SIZE))
                                    .addGap(0, 19, Short.MAX_VALUE)))
                    .addContainerGap()));
    layout.setVerticalGroup(
        layout
            .createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(
                layout
                    .createSequentialGroup()
                    .addGroup(
                        layout
                            .createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addGroup(
                                layout
                                    .createSequentialGroup()
                                    .addGap(4, 4, 4)
                                    .addComponent(
                                        jLabel1,
                                        GroupLayout.PREFERRED_SIZE,
                                        26,
                                        GroupLayout.PREFERRED_SIZE)))
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(
                        layout
                            .createParallelGroup(GroupLayout.Alignment.LEADING, false)
                            .addGroup(
                                GroupLayout.Alignment.TRAILING,
                                layout
                                    .createSequentialGroup()
                                    .addComponent(
                                        jScrollPane2,
                                        GroupLayout.PREFERRED_SIZE,
                                        393,
                                        GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addGroup(
                                        layout
                                            .createParallelGroup(GroupLayout.Alignment.BASELINE)
                                            .addComponent(closeButton)
                                            .addComponent(
                                                addButton,
                                                GroupLayout.DEFAULT_SIZE,
                                                GroupLayout.DEFAULT_SIZE,
                                                Short.MAX_VALUE)
                                            .addComponent(backButton))
                                    .addGap(6, 6, 6))
                            .addComponent(jScrollPane1, GroupLayout.Alignment.TRAILING))
                    .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
    pack();
  }

  private void addButtonActionPerformed(ActionEvent evt) {
    // TODO add your handling code here:
    int pane =
        JOptionPane.showConfirmDialog(
            null,
            "Are you sure you want to add your message to the request?",
            "Add To Request",
            JOptionPane.YES_NO_OPTION);
    if (pane == 0) {
      String sql = "INSERT INTO Message (RID, DUsername, TimeStamp, Message) VALUES (?, ?, ?, ?)";

      try {
        preparedStatement = connection.prepareStatement(sql);
        String temp = Integer.toString(requestNumber);
        preparedStatement.setString(1, temp);
        preparedStatement.setString(2, userID);
        Date date = new Date();
        String timestamp = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss").format(date);
        preparedStatement.setString(3, timestamp);
        String finalString =
            "\n" + addToRequest.getText() + "\n Added by " + userType + " " + userID;
        preparedStatement.setString(4, finalString);
        preparedStatement.execute();
        JOptionPane.showMessageDialog(null, "Message added");
        sql = "UPDATE Request SET Status = 'In Progress' WHERE RID = ?";
        preparedStatement = connection.prepareStatement(sql);
        temp = Integer.toString(requestNumber);
        preparedStatement.setString(1, temp);
        preparedStatement.execute();
        currentRequest.append("\n");
        currentRequest.append(timestamp);
        currentRequest.append("\n");
        currentRequest.append(finalString);
        addToRequest.setText("");
        sql = "UPDATE Message SET DUsername = ? WHERE RID = ?";
        preparedStatement = connection.prepareStatement(sql);
        preparedStatement.setString(1, userID);
        preparedStatement.setString(2, temp);
        preparedStatement.execute();
      } catch (SQLException | HeadlessException e) {
        JOptionPane.showMessageDialog(null, e);
      } finally {
        try {
          resultSet.close();
          preparedStatement.close();
        } catch (SQLException e) {
          JOptionPane.showMessageDialog(null, e);
        }
      }
    }
  }

  private void closeButtonActionPerformed(ActionEvent evt) {
    // TODO add your handling code here:
    int pane =
        JOptionPane.showConfirmDialog(
            null,
            "Are you sure you want to close the request?",
            "Close Request",
            JOptionPane.YES_NO_OPTION);
    if (pane == 0) {
      String sql = "UPDATE Request SET Status = 'Closed' WHERE RID = ?";
      try {
        preparedStatement = connection.prepareStatement(sql);
        String temp = Integer.toString(requestNumber);
        preparedStatement.setString(1, temp);
        preparedStatement.execute();
        JOptionPane.showMessageDialog(null, "Request has been closed.");
      } catch (SQLException | HeadlessException e) {
        JOptionPane.showMessageDialog(null, e);
      } finally {
        try {
          resultSet.close();
          preparedStatement.close();
        } catch (SQLException e) {
          JOptionPane.showMessageDialog(null, e);
        }
      }

      NewJFrame jFrame = new NewJFrame();
      if ("Doctor".equals(userType)) {
        DoctorView doctorView = new DoctorView(userID);
        doctorView.setVisible(true);
      } else {
        PatientView patientView = new PatientView(userID);
        patientView.setVisible(true);
      }
      dispose();
    }
  }

  private void backButtonActionPerformed(ActionEvent evt) {
    // TODO add your handling code here:
    try {
      resultSet.close();
      preparedStatement.close();
    } catch (SQLException e) {
      JOptionPane.showMessageDialog(null, e);
    }
    NewJFrame jFrame = new NewJFrame();
    if ("Doctor".equals(userType)) {
      DoctorView doctorView = new DoctorView(userID);
      doctorView.setVisible(true);
    } else {
      PatientView patientView = new PatientView(userID);
      patientView.setVisible(true);
    }
    dispose();
  }

  public static void main(String[] args) {
    try {
      for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
        if ("Nimbus".equals(info.getName())) {
          UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    } catch (ClassNotFoundException
        | InstantiationException
        | IllegalAccessException
        | UnsupportedLookAndFeelException ex) {
      Logger.getLogger(RequestConversation.class.getName()).log(Level.SEVERE, null, ex);
    }

    NewJFrame jFrame = new NewJFrame();
    final DoctorView doctorView = new DoctorView(jFrame.getUsername());
    /* Create and display the form */
    EventQueue.invokeLater(
        () ->
            new RequestConversation(
                    doctorView.getRequestID(), doctorView.getUsername(), doctorView.getUserType())
                .setVisible(true));
  }

  // Variables declaration - do not modify //
  private JButton addButton;
  private JTextArea addToRequest;
  private JButton closeButton;
  private JTextArea currentRequest;
  // End of variables declaration //
}
