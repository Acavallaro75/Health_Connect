package health;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.sql.*;
import static java.awt.Font.BOLD;
import static java.awt.Font.ITALIC;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
public final class PatientView extends JFrame {
  Connection connection;
  ResultSet resultSet = null;
  PreparedStatement preparedStatement = null;
  int requestID;
  String username;
  String userType;
  public boolean test;
  DefaultListModel<String> defaultListModel = new DefaultListModel<>();

  public PatientView(String patient) throws Exception {
    initComponents();
    Class.forName("org.sqlite.JDBC");
    connection = DriverManager.getConnection("jdbc:sqlite:Health_Connect_DB");
    JOptionPane.showMessageDialog(null, "Connected");

    username = patient;
    setUsername(patient);
    userType = "Patient";
    setUserType(userType);
    jList1.setVisible(false);
  }

  public String getUsername() {
    return this.username;
  }

  public void setUsername(String username) throws Exception {
    if (username.length() >= 1) {
      this.username = username;
    } else {
      throw new Exception("Invalid Username");
    }
  }

  public int getRequestID() {
    return this.requestID;
  }

  public void setRequestID(int requestID) throws Exception {
    if (requestID >= 1 && requestID < 100000) {
      this.requestID = requestID;
    } else {
      throw new Exception("Invalid Request ID");
    }
  }

  public String getUserType() {
    return this.userType;
  }

  public void setUserType(String userType) throws Exception {
    if (userType.equalsIgnoreCase("Patient")) {
      this.userType = userType;
    } else {
      throw new Exception("Invalid User Type");
    }
  }

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT
   * modify this code. The content of this method is always regenerated by the Form Editor.
   */
  private void initComponents() {
    JButton inProgressButton = new JButton();
    JButton closedButton = new JButton();
    JScrollPane jScrollPane1 = new JScrollPane();
    jList1 = new JList<>();
    JScrollBar jScrollBar1 = new JScrollBar();
    jLabel1 = new JLabel();
    JButton openRequest = new JButton();
    JLabel jLabel7 = new JLabel();
    JButton backButton = new JButton();
    JButton newButton = new JButton();

    setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

    inProgressButton.setText("In Progress Requests");
    inProgressButton.addActionListener(
        evt -> {
          try {
            InProgressButtonActionPerformed();
          } catch (Exception e) {
            e.printStackTrace();
          }
        });

    closedButton.setText("Closed Requests");
    closedButton.addActionListener(
        evt -> {
          try {
            closedButtonActionPerformed();
          } catch (Exception e) {
            e.printStackTrace();
          }
        });

    jScrollPane1.setViewportView(jList1);

    jLabel1.setFont(new Font("Eras Demi ITC", BOLD | ITALIC, 24));
    jLabel1.setText("Your Request History");

    openRequest.setText("Open Selected Request");
    openRequest.addActionListener(
        evt -> {
          try {
            openRequestActionPerformed();
          } catch (Exception e) {
            e.printStackTrace();
          }
        });

    jLabel7.setFont(new Font("Papyrus", BOLD, 14));
    jLabel7.setForeground(new Color(51, 51, 255));
    jLabel7.setText("HealthConnect");

    backButton.setText("Back");
    backButton.addActionListener(this::backButtonActionPerformed);

    newButton.setText("New Requests");
    newButton.addActionListener(
        evt -> {
          try {
            newButtonActionPerformed();
          } catch (Exception e) {
            e.printStackTrace();
          }
        });

    GroupLayout layout = new GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout
            .createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(
                layout
                    .createSequentialGroup()
                    .addContainerGap()
                    .addComponent(
                        jLabel1, GroupLayout.PREFERRED_SIZE, 513, GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(
                        LayoutStyle.ComponentPlacement.RELATED,
                        GroupLayout.DEFAULT_SIZE,
                        Short.MAX_VALUE)
                    .addComponent(
                        jLabel7, GroupLayout.PREFERRED_SIZE, 124, GroupLayout.PREFERRED_SIZE))
            .addGroup(
                layout
                    .createSequentialGroup()
                    .addGap(45, 45, 45)
                    .addGroup(
                        layout
                            .createParallelGroup(GroupLayout.Alignment.TRAILING)
                            .addGroup(
                                layout
                                    .createSequentialGroup()
                                    .addComponent(
                                        openRequest,
                                        GroupLayout.PREFERRED_SIZE,
                                        164,
                                        GroupLayout.PREFERRED_SIZE)
                                    .addGap(234, 234, 234)
                                    .addComponent(backButton))
                            .addComponent(
                                jScrollPane1,
                                GroupLayout.PREFERRED_SIZE,
                                703,
                                GroupLayout.PREFERRED_SIZE)
                            .addGroup(
                                layout
                                    .createSequentialGroup()
                                    .addComponent(
                                        newButton,
                                        GroupLayout.PREFERRED_SIZE,
                                        135,
                                        GroupLayout.PREFERRED_SIZE)
                                    .addGap(65, 65, 65)
                                    .addComponent(inProgressButton)
                                    .addGap(67, 67, 67)
                                    .addComponent(closedButton)
                                    .addGap(115, 115, 115)))
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(
                        jScrollBar1,
                        GroupLayout.PREFERRED_SIZE,
                        GroupLayout.DEFAULT_SIZE,
                        GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(36, Short.MAX_VALUE)));
    layout.setVerticalGroup(
        layout
            .createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(
                layout
                    .createSequentialGroup()
                    .addGroup(
                        layout
                            .createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(
                                layout
                                    .createSequentialGroup()
                                    .addGap(2, 2, 2)
                                    .addComponent(jLabel7))
                            .addGroup(
                                layout
                                    .createSequentialGroup()
                                    .addContainerGap()
                                    .addComponent(
                                        jLabel1,
                                        GroupLayout.PREFERRED_SIZE,
                                        48,
                                        GroupLayout.PREFERRED_SIZE)))
                    .addGap(24, 24, 24)
                    .addGroup(
                        layout
                            .createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(inProgressButton)
                            .addComponent(closedButton)
                            .addComponent(newButton))
                    .addPreferredGap(
                        LayoutStyle.ComponentPlacement.RELATED,
                        GroupLayout.DEFAULT_SIZE,
                        Short.MAX_VALUE)
                    .addGroup(
                        layout
                            .createParallelGroup(GroupLayout.Alignment.LEADING, false)
                            .addComponent(
                                jScrollBar1,
                                GroupLayout.DEFAULT_SIZE,
                                GroupLayout.DEFAULT_SIZE,
                                Short.MAX_VALUE)
                            .addComponent(
                                jScrollPane1, GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE))
                    .addGap(18, 18, 18)
                    .addGroup(
                        layout
                            .createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(openRequest)
                            .addComponent(backButton))
                    .addGap(19, 19, 19)));
    pack();
  }

  public void InProgressButtonActionPerformed() throws SQLException {
    jLabel1.setText("Your Opened Requests");
    jList1.setVisible(true);
    String element;
    String sql = "SELECT RID, Date FROM Request WHERE Status = ? AND PUsername = ?";
    defaultListModel.removeAllElements();
    element = "RID        Date";
    defaultListModel.addElement(element);
    preparedStatement = connection.prepareStatement(sql);
    preparedStatement.setString(1, "In Progress");
    preparedStatement.setString(2, username);
    resultSet = preparedStatement.executeQuery();
    if (resultSet.next()) {
      test = true;
      JOptionPane.showMessageDialog(null, "Username and Password is correct");
      element = resultSet.getString("RID") + "        " + resultSet.getString("Date");
      defaultListModel.addElement(element);
      while (resultSet.next()) {
        test = true;
        element = resultSet.getString("RID") + "        " + resultSet.getString("Date");
        defaultListModel.addElement(element);
      }
      jList1.setModel(defaultListModel);
    } else {
      JOptionPane.showMessageDialog(null, "No requests are in progress.");
      test = false;
    }
  }

  public void newButtonActionPerformed() throws SQLException {
    jLabel1.setText("Your New Requests");
    jList1.setVisible(true);
    String element;
    String sql = "SELECT RID, Date FROM Request WHERE Status = ? AND PUsername = ?";
    defaultListModel.removeAllElements();
    element = "RID        Date";
    defaultListModel.addElement(element);
    preparedStatement = connection.prepareStatement(sql);
    preparedStatement.setString(1, "New");
    preparedStatement.setString(2, username);
    resultSet = preparedStatement.executeQuery();
    if (resultSet.next()) {
      test = true;
      JOptionPane.showMessageDialog(null, "Username and Password is correct");
      element = resultSet.getString("RID") + "        " + resultSet.getString("Date");
      defaultListModel.addElement(element);
      while (resultSet.next()) {
        test = true;
        element = resultSet.getString("RID") + "        " + resultSet.getString("Date");
        defaultListModel.addElement(element);
      }
      jList1.setModel(defaultListModel);
    } else {
      JOptionPane.showMessageDialog(null, "No new requests.");
      test = false;
    }
  }

  public void closedButtonActionPerformed() throws SQLException {
    jLabel1.setText("Your Closed Requests");
    jList1.setVisible(true);
    String element;
    String sql = "SELECT RID, Date FROM Request WHERE Status = ? AND PUsername = ?";
    defaultListModel.removeAllElements();
    element = "RID        Date";
    defaultListModel.addElement(element);
    preparedStatement = connection.prepareStatement(sql);
    preparedStatement.setString(1, "Closed");
    preparedStatement.setString(2, username);
    resultSet = preparedStatement.executeQuery();
    if (resultSet.next()) {
      test = true;
      JOptionPane.showMessageDialog(null, "Username and Password is correct");
      element = resultSet.getString("RID") + "        " + resultSet.getString("Date");
      defaultListModel.addElement(element);
      while (resultSet.next()) {
        element = resultSet.getString("RID") + "        " + resultSet.getString("Date");
        defaultListModel.addElement(element);
      }
      jList1.setModel(defaultListModel);
    } else {
      test = false;
      JOptionPane.showMessageDialog(null, "No requests have been closed.");
    }
  }

  public void backButtonActionPerformed(ActionEvent evt) {
    dispose();
    Profile profile = new Profile(username);
    profile.setVisible(true);
  }

  public void openRequestActionPerformed() throws Exception {
    if (jList1.getSelectedIndex() == -1) {
      JOptionPane.showMessageDialog(null, "Please select a request");
      throw new Exception("No Selection Made");
    } else {
      String temp_requestID = jList1.getSelectedValue().toString();
      temp_requestID = temp_requestID.substring(0, 3);
      requestID = Integer.parseInt(temp_requestID);
      setRequestID(requestID);

      RequestConversation requestConversation =
          new RequestConversation(requestID, username, userType);
      dispose();
      requestConversation.setVisible(true);
    }
  }

  public static void main(String[] args)
      throws UnsupportedLookAndFeelException, ClassNotFoundException, InstantiationException,
          IllegalAccessException {
    for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
      if ("Nimbus".equals(info.getName())) {
        UIManager.setLookAndFeel(info.getClassName());
        break;
      }
    }
  }

  // Variable declarations //
  private JLabel jLabel1;
  public JList jList1;
  // End of variables declaration //
}
